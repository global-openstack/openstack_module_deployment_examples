name: OpenStack Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        scenario: [
          "dfw3-rocky9-local-disk-deployment",
        ]

    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
      OS_PRIVATE_KEY: ${{ secrets.OS_PRIVATE_KEY }}
      DEFAULT_SSH_USER: rocky

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform init

    - name: Terraform Apply with Retry Logic
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "🚀 Starting Terraform Apply..."

        max_retries=5
        delay=15

        for attempt in $(seq 1 $max_retries); do
          echo "🔄 Attempt $attempt of $max_retries..."
          terraform apply -auto-approve | tee terraform_apply.log

          if grep -q "Apply complete!" terraform_apply.log; then
            echo "✅ Terraform Apply completed successfully!"
            break
          else
            if grep -q "openstack" terraform_apply.log; then
              echo "⏳ Waiting $delay seconds before retrying..."
              sleep $delay
            else
              echo "❌ Non-retryable error detected."
              cat terraform_apply.log
              exit 1
            fi
          fi

          if [ "$attempt" -eq "$max_retries" ]; then
            echo "🔥 Maximum retries reached. Terraform Apply failed."
            exit 1
          fi
        done

    - name: Discover Floating IPs from Terraform Output
      id: get_floating_ips
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "🔍 Fetching Terraform Outputs..."
        
        max_retries=3
        for attempt in $(seq 1 $max_retries); do
          echo "🔄 Attempt $attempt of $max_retries..."

          terraform output -json floating_ips | grep -E '^{.*}$' > floating_ips.json

          if jq empty floating_ips.json > /dev/null 2>&1; then
            echo "✅ JSON is valid."
            break
          else
            echo "❌ The floating_ips.json is not valid JSON (attempt $attempt)."
            if [ "$attempt" -lt "$max_retries" ]; then
              echo "🔄 Retrying in 5 seconds..."
              sleep 5
            else
              echo "🔥 Maximum retries reached. Failing."
              cat floating_ips.json
              exit 1
            fi
          fi
        done

        echo "🔍 Parsing Floating IPs..."
        
        jq -r 'to_entries | .[] | "\(.key):\(.value)"' floating_ips.json > floating_ips.txt
        
        if [ ! -s floating_ips.txt ]; then
          echo "❌ No Floating IPs found."
          exit 1
        fi

        FLOATING_IPS_LIST=$(paste -sd ',' floating_ips.txt)
        echo "FLOATING_IPS=$FLOATING_IPS_LIST" >> $GITHUB_ENV
        echo "✅ Exported FLOATING_IPS as: $FLOATING_IPS_LIST"

    - name: Prepare SSH Private Key
      run: |
        echo "🗝️ Writing SSH Private Key to file..."
        PRIVATE_KEY_PATH="$HOME/private_key.pem"
        echo "$OS_PRIVATE_KEY" > "$PRIVATE_KEY_PATH"
        chmod 600 "$PRIVATE_KEY_PATH"
        echo "✅ Private key is accessible at $PRIVATE_KEY_PATH."

    - name: SSH Connectivity Test
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "🔌 Starting SSH Connectivity Test..."
        echo "📄 Reading floating IPs from floating_ips.txt"
        
        # Log file for debugging
        echo "📝 Debugging floating_ips.txt content:"
        cat floating_ips.txt
        
        # Ensure correct line endings
        sed -i 's/\r$//' floating_ips.txt

        # Read each line in floating_ips.txt and debug
        while IFS= read -r line || [ -n "$line" ]; do
          echo "🔄 Processing line: '$line'"

          # Split into name and IP
          vm_name=$(echo $line | awk -F':' '{print $1}')
          ip_address=$(echo $line | awk -F':' '{print $2}')

          # If empty, skip it
          if [ -z "$vm_name" ] || [ -z "$ip_address" ]; then
            echo "⚠️ Skipping empty or malformed line: $line"
            continue
          fi
          
          echo "🌐 Checking SSH port availability for $vm_name ($ip_address)..."
          
          # Retry loop for port availability with a timeout
          for i in {1..5}; do
            if timeout 10 nc -z -w5 $ip_address 22; then
              echo "🔌 Port 22 is open for $vm_name ($ip_address)"
              break
            else
              echo "❌ Port 22 is closed, retrying in 5s..."
              sleep 5
            fi
          done
          
          # Verify if we actually tried all 5 attempts and still failed
          if [ "$i" -eq 5 ]; then
            echo "⚠️ Warning: Port 22 did not open for $vm_name after 5 attempts."
            echo "🔄 Moving to the next VM..."
            continue  # Skip to the next VM in case of repeated failure
          fi

          echo "🔌 Connecting to $vm_name ($ip_address)..."
          connection_success=0
          
          # Retry loop for SSH connectivity with a timeout
          for i in {1..5}; do
            if timeout 15 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i "$HOME/private_key.pem" ${DEFAULT_SSH_USER}@$ip_address "hostname"; then
              echo "✅ Connection to $vm_name successful!"
              connection_success=1
              break
            else
              echo "⚠️ SSH attempt $i failed...retrying in 5 seconds."
              sleep 5
            fi
          done

          # If still unsuccessful after 5 attempts
          if [ $connection_success -eq 0 ]; then
            echo "❌ Connection to $vm_name failed after 5 attempts."
            echo "🔄 Moving to the next VM..."
            continue  # Explicitly continue to avoid blocking
          fi

          echo "🔄 Moving to the next VM..."
        done < floating_ips.txt

    - name: Terraform Destroy (Cleanup)
      if: always()
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform destroy -auto-approve
