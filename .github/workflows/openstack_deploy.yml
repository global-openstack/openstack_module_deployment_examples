name: OpenStack Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        scenario: [
          "dfw3-rocky9-local-disk-deployment",
        ]

    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
      OS_PRIVATE_KEY: ${{ secrets.OS_PRIVATE_KEY }}
      DEFAULT_SSH_USER: rocky   # <-- Update this if needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform init

    - name: Terraform Apply
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform apply -auto-approve | tee terraform_apply.log

    - name: Discover Floating IPs from Terraform Output
      id: get_floating_ips
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üîç Fetching Terraform Outputs..."
        
        # Get the floating IPs directly from Terraform
        terraform output -json floating_ips > floating_ips.json

        echo "üîç Validating Floating IPs JSON..."
        if ! jq empty floating_ips.json > /dev/null 2>&1; then
          echo "‚ùå Terraform output JSON is not valid. Dumping contents:"
          cat floating_ips.json
          exit 1
        fi

        echo "üîç Parsing Floating IPs..."
        jq -r 'to_entries[] | "\(.key) \(.value)"' floating_ips.json > floating_ips.txt

        # Validate output
        if [ ! -s floating_ips.txt ]; then
          echo "‚ùå No Floating IPs found."
          exit 1
        fi

        echo "‚úÖ Floating IPs found and ready for SSH testing:"
        cat floating_ips.txt
        
        # Set SSH key permissions for security
        chmod 600 $OS_PRIVATE_KEY

    - name: SSH Connectivity Test
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üîå Starting SSH Connectivity Test..."

        while IFS= read -r line; do
          vm_name=$(echo $line | awk '{print $1}')
          ip_address=$(echo $line | awk '{print $2}')
          
          echo "Attempting to SSH into $vm_name at $ip_address..."

          retry_count=5
          for ((i=1; i<=retry_count; i++)); do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i $OS_PRIVATE_KEY ${DEFAULT_SSH_USER}@$ip_address "hostname" && break || {
              echo "SSH attempt $i failed...retrying in 5 seconds."
              sleep 5
            }
          done

          if [ $? -eq 0 ]; then
            echo "‚úÖ SSH connection to $vm_name ($ip_address) successful!"
          else
            echo "‚ùå SSH connection to $vm_name ($ip_address) failed after $retry_count attempts."
          fi
        done < floating_ips.txt

    - name: Terraform Destroy (Cleanup)
      if: always()
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform destroy -auto-approve
