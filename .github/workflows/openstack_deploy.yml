name: OpenStack Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        scenario: [
          "dfw3-rocky9-local-disk-deployment",
        ]

    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
      OS_PRIVATE_KEY: ${{ secrets.OS_PRIVATE_KEY }}
      DEFAULT_SSH_USER: rocky   # <-- Update this if needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform init

    - name: Terraform Apply with Retry Logic
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üöÄ Starting Terraform Apply with Retry Logic..."

        max_retries=5
        delay=15

        for attempt in $(seq 1 $max_retries); do
          echo "üîÑ Attempt $attempt of $max_retries..."
          terraform apply -auto-approve | tee terraform_apply.log

          if grep -q "Apply complete!" terraform_apply.log; then
            echo "‚úÖ Terraform Apply completed successfully!"
            break
          else
            echo "‚ùå Terraform Apply failed. Checking for OpenStack API errors..."
            if grep -q "openstack" terraform_apply.log; then
              echo "üïí Waiting $delay seconds before retrying..."
              sleep $delay
            else
              echo "‚ö†Ô∏è Non-retryable error detected. Exiting."
              cat terraform_apply.log
              exit 1
            fi
          fi

          if [ "$attempt" -eq "$max_retries" ]; then
            echo "üî• Maximum retries reached. Terraform Apply failed."
            exit 1
          fi
        done

    - name: Prepare SSH Private Key
      run: |
        echo "üóùÔ∏è Writing SSH Private Key to file..."
        echo "$OS_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ls -la private_key.pem

    - name: Discover Floating IPs from Terraform Output
      id: get_floating_ips
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üîç Fetching Terraform Outputs..."
        
        max_retries=3
        for attempt in $(seq 1 $max_retries); do
          echo "üîÑ Attempt $attempt of $max_retries..."

          # Get the raw JSON output, filter only lines that start with '{'
          terraform output -json floating_ips | grep -E '^{.*}$' > floating_ips.json

          echo "üîç Raw Terraform Output (sanitized):"
          cat floating_ips.json

          echo "üîç Validating JSON format..."
          
          # Validate JSON format
          if jq empty floating_ips.json > /dev/null 2>&1; then
            echo "‚úÖ JSON is valid."
            break
          else
            echo "‚ùå The floating_ips.json is not valid JSON (attempt $attempt)."
            if [ "$attempt" -lt "$max_retries" ]; then
              echo "üîÑ Retrying in 5 seconds..."
              sleep 5
            else
              echo "üî• Maximum retries reached. Failing."
              cat floating_ips.json
              exit 1
            fi
          fi
        done

        echo "üîç Parsing Floating IPs..."
        
        # Use jq to transform into line-based format
        jq -r 'to_entries | .[] | "\(.key) \(.value)"' floating_ips.json > floating_ips.txt
        
        # Validate output
        if [ ! -s floating_ips.txt ]; then
          echo "‚ùå No Floating IPs found."
          exit 1
        fi

        echo "‚úÖ Floating IPs found and ready for SSH testing:"
        cat floating_ips.txt
        
        # Export to environment
        echo "FLOATING_IPS=$(cat floating_ips.txt)" >> $GITHUB_ENV

    - name: SSH Connectivity Test
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üîå Starting SSH Connectivity Test..."
        while IFS= read -r line; do
          vm_name=$(echo $line | awk '{print $1}')
          ip_address=$(echo $line | awk '{print $2}')
          
          echo "Attempting to SSH into $vm_name at $ip_address..."
          
          for i in {1..5}; do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i private_key.pem ${DEFAULT_SSH_USER}@$ip_address "hostname" && break
            echo "SSH attempt $i failed...retrying in 5 seconds."
            sleep 5
          done

          if [ $? -eq 0 ]; then
            echo "‚úÖ SSH connection to $vm_name ($ip_address) successful!"
          else
            echo "‚ùå SSH connection to $vm_name ($ip_address) failed after 5 attempts."
          fi
        done < floating_ips.txt

    - name: Terraform Destroy (Cleanup)
      if: always()
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform destroy -auto-approve
