name: OpenStack Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        scenario: [
          "dfw3-rocky9-local-disk-deployment",
          "dfw3-rocky9-volume-deployment"
        ]

    env:
      OS_AUTH_URL: ${{ secrets.OS_AUTH_URL }}
      OS_PROJECT_ID: ${{ secrets.OS_PROJECT_ID }}
      OS_PROJECT_NAME: ${{ secrets.OS_PROJECT_NAME }}
      OS_PROJECT_DOMAIN_NAME: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
      OS_USER_DOMAIN_NAME: ${{ secrets.OS_USER_DOMAIN_NAME }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: ${{ secrets.OS_PASSWORD }}
      OS_REGION_NAME: ${{ secrets.OS_REGION_NAME }}
      OS_INTERFACE: ${{ secrets.OS_INTERFACE }}
      OS_IDENTITY_API_VERSION: ${{ secrets.OS_IDENTITY_API_VERSION }}
      OS_PRIVATE_KEY: ${{ secrets.OS_PRIVATE_KEY }}
      DEFAULT_SSH_USER: rocky   # <-- Update this if needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform init

    - name: Terraform Plan
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform apply tfplan

    - name: Discover Floating IPs from Terraform State
      id: get_floating_ips
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: |
        echo "üîç Fetching Terraform State..."
        terraform state pull > terraform_state.json
        
        echo "üîç Validating Terraform State JSON..."
        if ! jq empty terraform_state.json > /dev/null 2>&1; then
          echo "‚ùå Terraform state JSON is not valid. Dumping contents:"
          cat terraform_state.json
          exit 1
        fi
        
        echo "üîç Parsing Floating IP Associations..."
        
        # Extract all types of floating IPs
        jq -r '
          .resources[] |
          select(
            .type == "openstack_networking_floatingip_associate_v2" or
            .type == "openstack_networking_floatingip_v2"
          ) |
          .instances[] |
          {
            name: .index_key,
            ip: (
              if .attributes.floating_ip != null then .attributes.floating_ip
              elif .attributes.address != null then .attributes.address
              else null end
            )
          } | select(.ip != null) |
          "\(.name) \(.ip)"
        ' terraform_state.json > floating_ips.txt
        
        # Validate output
        if [ ! -s floating_ips.txt ]; then
          echo "‚ùå No Floating IPs found."
          exit 1
        fi

        echo "‚úÖ Floating IPs found and ready for SSH testing:"
        cat floating_ips.txt

    - name: Terraform Destroy (Cleanup)
      if: always()
      working-directory: openstack_compute_instance_v2/${{ matrix.scenario }}
      run: terraform destroy -auto-approve
